// Generated by CoffeeScript 2.0.0-beta4
(function() {
  var Teacup, allTags, doctypes, elements, escape, fn1, fn2, fn3, fn4, fn5, fn6, i, j, l, len, len1, len2, len3, len4, len5, m, mergeElements, n, normalizeArray, o, quote, ref, ref1, ref2, ref3, ref4, ref5, tagName,
    indexOf = [].indexOf;

  ({doctypes, elements, normalizeArray, mergeElements, allTags, escape, quote} = require('../src/html-tags'));

  module.exports = Teacup = Teacup = (function() {
    class Teacup {
      constructor(instantiator, oracle) {
        this.instantiator = instantiator;
        this.oracle = oracle;
        this.htmlOut = null;
        this.functionOut = null;
      }

      resetFunctionBuffer(html = null) {
        var previous;
        previous = this.functionOut;
        this.functionOut = html;
        return previous;
      }

      resetBuffer(html = null) {
        var previous;
        previous = this.htmlOut;
        this.htmlOut = html;
        return previous;
      }

      march(component) {
        var attrs, c, i, len, node, tagConstructor, tagName, value;
        if (!(value = component != null ? component.toString() : void 0)) {
          return '';
        }
        //console.log "March",component
        switch (typeof component) {
          case 'function':
            this.march(this.instantiator(component));
            break;
          case 'string':
          case 'number':
            this.raw(component.toString());
            break;
          case (Array.isArray(component)) && 'object':
            for (i = 0, len = component.length; i < len; i++) {
              c = component[i];
              this.march(c);
            }
            break;
          case (value !== '[object Object]') && 'object':
            this.textOnly(component);
            break;
          case 'object':
            try {
              tagName = this.oracle.getName(component);
              if ('function' === typeof tagName) {
                //debugger
                //this component has not been instantiated yet
                tagConstructor = tagName;
                tagName = tagConstructor.name;
                if (component.attrs) {
                  attrs = component.attrs;
                } else {
                  attrs = component.props;
                }
                node = new tagConstructor(tagName, attrs, component.children);
                if (!Teacup.prototype[tagName]) {
                  Teacup.prototype[tagName] = function(component, ...args) {
                    return this.tag(component, ...args);
                  };
                }
                this.march(node);
              } else {
                //node has been istantiated
                if (!Teacup.prototype[tagName]) {
                  Teacup.prototype[tagName] = function(component, ...args) {
                    return this.tag(component, ...args);
                  };
                }
                //render the node and append it to the htmlOout string
                this[tagName](component);
              }
            } catch (error) {
              debugger;
            }
            break;
          default:
            debugger;
            this.textOnly("bad component?");
            this.textOnly(component.toString());
            return;
        }
      }

      render(component) {
        var previous, result;
        previous = this.resetBuffer('');
        try {
          this.march(component);
        } finally {
          result = this.resetBuffer(previous);
        }
        return result;
      }

      // alias render for coffeecup compatibility
      cede(...args) {
        return this.render(...args);
      }

      renderable(template) {
        var teacup;
        teacup = this;
        return function(...args) {
          var result;
          if (teacup.htmlOut === null) {
            teacup.htmlOut = '';
            try {
              template.apply(this, args);
            } finally {
              result = teacup.resetBuffer();
            }
            return result;
          } else {
            return template.apply(this, args);
          }
        };
      }

      renderAttr(name, value) {
        var k, v;
        if (name === 'className') { // && !oracle.useClassName
          return '';
        }
        if (value == null) {
          return ` ${name}`;
        }
        if (value === false) {
          return '';
        }
        if (name === 'data' && typeof value === 'object') {
          return ((function() {
            var results;
            results = [];
            for (k in value) {
              v = value[k];
              results.push(this.renderAttr(`data-${k}`, v));
            }
            return results;
          }).call(this)).join('');
        }
        if (value === true) {
          value = name;
        }
        return ` ${name}=${quote(escape(value.toString()))}`;
      }

      renderAttrs(obj) {
        var i, len, name, ref, result, value;
        if (!obj) {
          return '';
        }
        result = '';
        ref = this.attrOrder;
        // render explicitly ordered attributes first
        for (i = 0, len = ref.length; i < len; i++) {
          name = ref[i];
          if (name in obj) {
            result += this.renderAttr(name, obj[name]);
          }
        }
        // then unordered attrs
        for (name in obj) {
          value = obj[name];
          if (indexOf.call(this.attrOrder, name) >= 0) {
            continue;
          }
          result += this.renderAttr(name, value);
        }
        return result;
      }

      renderContents(contents, ...rest) {
        var result;
        if (contents == null) {

        } else if (typeof contents === 'function') {
          result = contents.apply(this, rest);
          if (typeof result === 'string') {
            return this.textOnly(result);
          }
        } else {
          return this.textOnly(contents);
        }
      }

      tag(cell) {
        var children, props, tagName;
        ({children} = cell);
        //console.log "CELL!",cell
        debugger;
        props = this.oracle.getProp(cell);
        tagName = this.oracle.getName(cell);
        if (tagName !== 'text') {
          this.raw(`<${tagName}${this.renderAttrs(props)}>`);
        }
        if (cell.text) {
          this.textOnly(cell.text);
        }
        if (props != null ? props.dangerouslySetInnerHTML : void 0) {
          this.raw(props.dangerouslySetInnerHTML.__html);
        } else {
          this.march(children);
        }
        if (tagName !== 'text') {
          return this.raw(`</${tagName}>`);
        }
      }

      rawMithril(cell) {
        this.raw(cell.children);
      }

      rawTag(cell) {
        var children, props, tagName;
        ({children} = cell);
        props = this.oracle.getProp(cell);
        tagName = this.oracle.getName(cell);
        this.raw(`<${tagName}${this.renderAttrs(props)}>`);
        this.raw(children);
        return this.raw(`</${tagName}>`);
      }

      scriptTag(cell) {
        var children, props, tagName;
        ({children} = cell);
        props = this.oracle.getProp(cell);
        tagName = this.oracle.getName(cell);
        this.raw(`<${tagName}${this.renderAttrs(props)}>`);
        this.renderContents(children);
        return this.raw(`</${tagName}>`);
      }

      selfClosingTag(cell) {
        var children, props, tagName;
        ({children} = cell);
        props = this.oracle.getProp(cell);
        tagName = this.oracle.getName(cell);
        if ((normalizeArray(children)).length !== 0) {
          throw new Error(`Halvalla: <${tagName}/> must not have content.  Attempted to nest ${children}`);
        }
        return this.raw(`<${tagName}${this.renderAttrs(props)} />`);
      }

      coffeescriptTag(cell) {
        var fn;
        fn = cell.children;
        return this.raw(`<script type=\"text/javascript\">(function() {\n  var __slice = [].slice,\n      __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n      __hasProp = {}.hasOwnProperty,\n      __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n  (${escape(fn.toString())})();\n})();</script>`);
      }

      commentTag(text) {
        return this.raw(`<!--${escape(text.children)}-->`);
      }

      doctypeTag(type = 5) {
        return this.raw(doctypes[type]);
      }

      ie(cell) {
        this.raw(`<!--[if ${escape(cell.props.condition)}]>`);
        this.march(cell.children);
        return this.raw("<![endif]-->");
      }

      textOnly(s) {
        if (this.htmlOut == null) {
          throw new Error("Halvalla: can't call a tag function outside a rendering context");
        }
        this.htmlOut += (s != null) && escape(s.toString()) || '';
        //console.log "text appends ",s? and escape(s.toString()) or ''
        return null;
      }

      raw(s) {
        if (s == null) {
          return;
        }
        this.htmlOut += s;
        //console.log "raw appends ",s? and escape(s.toString()) or ''
        return null;
      }

    };

    Teacup.prototype.attrOrder = ['id', 'class'];

    return Teacup;

  })();

  ref = mergeElements('regular', 'obsolete');
  // Define tag functions on the prototype for pretty stack traces
  fn1 = function(tagName) {
    return Teacup.prototype[tagName] = function(...args) {
      return this.tag(...args);
    };
  };
  for (i = 0, len = ref.length; i < len; i++) {
    tagName = ref[i];
    fn1(tagName);
  }

  Teacup.prototype['<'] = function(...args) {
    return this.rawMithril(...args);
  };

  ref1 = mergeElements('raw');
  fn2 = function(tagName) {
    return Teacup.prototype[tagName] = function(...args) {
      return this.rawTag(...args);
    };
  };
  for (j = 0, len1 = ref1.length; j < len1; j++) {
    tagName = ref1[j];
    fn2(tagName);
  }

  ref2 = mergeElements('coffeescript');
  fn3 = function(tagName) {
    return Teacup.prototype[tagName] = function(...args) {
      return this.coffeescriptTag(...args);
    };
  };
  for (l = 0, len2 = ref2.length; l < len2; l++) {
    tagName = ref2[l];
    fn3(tagName);
  }

  ref3 = mergeElements('comment');
  fn4 = function(tagName) {
    return Teacup.prototype[tagName] = function(...args) {
      return this.commentTag(...args);
    };
  };
  for (m = 0, len3 = ref3.length; m < len3; m++) {
    tagName = ref3[m];
    fn4(tagName);
  }

  ref4 = mergeElements('script');
  fn5 = function(tagName) {
    return Teacup.prototype[tagName] = function(...args) {
      return this.scriptTag(...args);
    };
  };
  for (n = 0, len4 = ref4.length; n < len4; n++) {
    tagName = ref4[n];
    fn5(tagName);
  }

  ref5 = mergeElements('void', 'obsolete_void');
  fn6 = function(tagName) {
    return Teacup.prototype[tagName] = function(...args) {
      return this.selfClosingTag(...args);
    };
  };
  for (o = 0, len5 = ref5.length; o < len5; o++) {
    tagName = ref5[o];
    fn6(tagName);
  }

}).call(this);
