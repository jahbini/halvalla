// Generated by CoffeeScript 1.12.7
(function() {
  var Teacup, allTags, doctypes, elements, escape, fn1, fn2, fn3, fn4, fn5, fn6, i, j, l, len, len1, len2, len3, len4, len5, m, mergeElements, n, normalizeArray, o, quote, ref, ref1, ref2, ref3, ref4, ref5, ref6, tagName,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = require('../src/html-tags'), doctypes = ref.doctypes, elements = ref.elements, normalizeArray = ref.normalizeArray, mergeElements = ref.mergeElements, allTags = ref.allTags, escape = ref.escape, quote = ref.quote;

  module.exports = Teacup = Teacup = (function() {
    function Teacup(instantiator, oracle) {
      this.instantiator = instantiator;
      this.oracle = oracle;
      this.htmlOut = null;
      this.functionOut = null;
    }

    Teacup.prototype.resetFunctionBuffer = function(html) {
      var previous;
      if (html == null) {
        html = null;
      }
      previous = this.functionOut;
      this.functionOut = html;
      return previous;
    };

    Teacup.prototype.resetBuffer = function(html) {
      var previous;
      if (html == null) {
        html = null;
      }
      previous = this.htmlOut;
      this.htmlOut = html;
      return previous;
    };

    Teacup.prototype.march = function(component) {
      var attrs, c, i, len, node, tagConstructor, tagName, value;
      if (!(value = component != null ? component.toString() : void 0)) {
        return '';
      }
      switch (typeof component) {
        case 'function':
          this.march(this.instantiator(component));
          break;
        case 'string':
        case 'number':
          this.raw(component.toString());
          break;
        case (Array.isArray(component)) && 'object':
          for (i = 0, len = component.length; i < len; i++) {
            c = component[i];
            this.march(c);
          }
          break;
        case (value !== '[object Object]') && 'object':
          this.textOnly(component);
          break;
        case 'object':
          try {
            tagName = this.oracle.getName(component);
            if ('function' === typeof tagName) {
              tagConstructor = tagName;
              tagName = tagConstructor.name;
              if (component.attrs) {
                attrs = component.attrs;
              } else {
                attrs = component.props;
              }
              node = new tagConstructor(tagName, attrs, component.children);
              if (!Teacup.prototype[tagName]) {
                Teacup.prototype[tagName] = function() {
                  var args, component;
                  component = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
                  return this.tag.apply(this, [component].concat(slice.call(args)));
                };
              }
              this.march(node);
            } else {
              if (!Teacup.prototype[tagName]) {
                Teacup.prototype[tagName] = function() {
                  var args, component;
                  component = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
                  return this.tag.apply(this, [component].concat(slice.call(args)));
                };
              }
              this[tagName](component);
            }
          } catch (error) {
            debugger;
          }
          break;
        default:
          debugger;
          this.textOnly("bad component?");
          this.textOnly(component.toString());
          return;
      }
    };

    Teacup.prototype.render = function(component) {
      var previous, result;
      previous = this.resetBuffer('');
      try {
        this.march(component);
      } finally {
        result = this.resetBuffer(previous);
      }
      return result;
    };

    Teacup.prototype.cede = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.render.apply(this, args);
    };

    Teacup.prototype.renderable = function(template) {
      var teacup;
      teacup = this;
      return function() {
        var args, result;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if (teacup.htmlOut === null) {
          teacup.htmlOut = '';
          try {
            template.apply(this, args);
          } finally {
            result = teacup.resetBuffer();
          }
          return result;
        } else {
          return template.apply(this, args);
        }
      };
    };

    Teacup.prototype.renderAttr = function(name, value) {
      var k, v;
      if (name === 'className') {
        return '';
      }
      if (value == null) {
        return " " + name;
      }
      if (value === false) {
        return '';
      }
      if (name === 'data' && typeof value === 'object') {
        return ((function() {
          var results;
          results = [];
          for (k in value) {
            v = value[k];
            results.push(this.renderAttr("data-" + k, v));
          }
          return results;
        }).call(this)).join('');
      }
      if (value === true) {
        value = name;
      }
      return " " + name + "=" + (quote(escape(value.toString())));
    };

    Teacup.prototype.attrOrder = ['id', 'class'];

    Teacup.prototype.renderAttrs = function(obj) {
      var i, len, name, ref1, result, value;
      if (!obj) {
        return '';
      }
      result = '';
      ref1 = this.attrOrder;
      for (i = 0, len = ref1.length; i < len; i++) {
        name = ref1[i];
        if (name in obj) {
          result += this.renderAttr(name, obj[name]);
        }
      }
      for (name in obj) {
        value = obj[name];
        if (indexOf.call(this.attrOrder, name) >= 0) {
          continue;
        }
        result += this.renderAttr(name, value);
      }
      return result;
    };

    Teacup.prototype.renderContents = function() {
      var contents, rest, result;
      contents = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (contents == null) {

      } else if (typeof contents === 'function') {
        result = contents.apply(this, rest);
        if (typeof result === 'string') {
          return this.textOnly(result);
        }
      } else {
        return this.textOnly(contents);
      }
    };

    Teacup.prototype.tag = function(cell) {
      var children, props, tagName;
      children = cell.children;
      debugger;
      props = this.oracle.getProp(cell);
      tagName = this.oracle.getName(cell);
      if (tagName !== 'text') {
        this.raw("<" + tagName + (this.renderAttrs(props)) + ">");
      }
      if (cell.text) {
        this.textOnly(cell.text);
      }
      if (props != null ? props.dangerouslySetInnerHTML : void 0) {
        this.raw(props.dangerouslySetInnerHTML.__html);
      } else {
        this.march(children);
      }
      if (tagName !== 'text') {
        return this.raw("</" + tagName + ">");
      }
    };

    Teacup.prototype.rawMithril = function(cell) {
      this.raw(cell.children);
    };

    Teacup.prototype.rawTag = function(cell) {
      var children, props, tagName;
      children = cell.children;
      props = this.oracle.getProp(cell);
      tagName = this.oracle.getName(cell);
      this.raw("<" + tagName + (this.renderAttrs(props)) + ">");
      this.raw(children);
      return this.raw("</" + tagName + ">");
    };

    Teacup.prototype.scriptTag = function(cell) {
      var children, props, tagName;
      children = cell.children;
      props = this.oracle.getProp(cell);
      tagName = this.oracle.getName(cell);
      this.raw("<" + tagName + (this.renderAttrs(props)) + ">");
      this.renderContents(children);
      return this.raw("</" + tagName + ">");
    };

    Teacup.prototype.selfClosingTag = function(cell) {
      var children, props, tagName;
      children = cell.children;
      props = this.oracle.getProp(cell);
      tagName = this.oracle.getName(cell);
      if ((normalizeArray(children)).length !== 0) {
        throw new Error("Halvalla: <" + tagName + "/> must not have content.  Attempted to nest " + children);
      }
      return this.raw("<" + tagName + (this.renderAttrs(props)) + " />");
    };

    Teacup.prototype.coffeescriptTag = function(cell) {
      var fn;
      fn = cell.children;
      return this.raw("<script type=\"text/javascript\">(function() {\n  var __slice = [].slice,\n      __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n      __hasProp = {}.hasOwnProperty,\n      __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n  (" + (escape(fn.toString())) + ")();\n})();</script>");
    };

    Teacup.prototype.commentTag = function(text) {
      return this.raw("<!--" + (escape(text.children)) + "-->");
    };

    Teacup.prototype.doctypeTag = function(type) {
      if (type == null) {
        type = 5;
      }
      return this.raw(doctypes[type]);
    };

    Teacup.prototype.ie = function(cell) {
      this.raw("<!--[if " + (escape(cell.props.condition)) + "]>");
      this.march(cell.children);
      return this.raw("<![endif]-->");
    };

    Teacup.prototype.textOnly = function(s) {
      if (this.htmlOut == null) {
        throw new Error("Halvalla: can't call a tag function outside a rendering context");
      }
      this.htmlOut += (s != null) && escape(s.toString()) || '';
      return null;
    };

    Teacup.prototype.raw = function(s) {
      if (s == null) {
        return;
      }
      this.htmlOut += s;
      return null;
    };

    return Teacup;

  })();

  ref1 = mergeElements('regular', 'obsolete');
  fn1 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.tag.apply(this, args);
    };
  };
  for (i = 0, len = ref1.length; i < len; i++) {
    tagName = ref1[i];
    fn1(tagName);
  }

  Teacup.prototype['<'] = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return this.rawMithril.apply(this, args);
  };

  ref2 = mergeElements('raw');
  fn2 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.rawTag.apply(this, args);
    };
  };
  for (j = 0, len1 = ref2.length; j < len1; j++) {
    tagName = ref2[j];
    fn2(tagName);
  }

  ref3 = mergeElements('coffeescript');
  fn3 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.coffeescriptTag.apply(this, args);
    };
  };
  for (l = 0, len2 = ref3.length; l < len2; l++) {
    tagName = ref3[l];
    fn3(tagName);
  }

  ref4 = mergeElements('comment');
  fn4 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.commentTag.apply(this, args);
    };
  };
  for (m = 0, len3 = ref4.length; m < len3; m++) {
    tagName = ref4[m];
    fn4(tagName);
  }

  ref5 = mergeElements('script');
  fn5 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.scriptTag.apply(this, args);
    };
  };
  for (n = 0, len4 = ref5.length; n < len4; n++) {
    tagName = ref5[n];
    fn5(tagName);
  }

  ref6 = mergeElements('void', 'obsolete_void');
  fn6 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.selfClosingTag.apply(this, args);
    };
  };
  for (o = 0, len5 = ref6.length; o < len5; o++) {
    tagName = ref6[o];
    fn6(tagName);
  }

}).call(this);
