// Generated by CoffeeScript 1.12.7
(function() {
  var BagMan, Teacup, allTags, doctypes, elements, escape, fn1, fn2, fn3, fn4, fn5, fn6, fn7, i, j, l, len, len1, len2, len3, len4, len5, len6, m, mergeElements, normalizeArray, o, p, q, quote, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, tagName,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = require('../lib/html-tags'), doctypes = ref.doctypes, elements = ref.elements, normalizeArray = ref.normalizeArray, mergeElements = ref.mergeElements, allTags = ref.allTags, escape = ref.escape, quote = ref.quote, BagMan = ref.BagMan;

  module.exports = Teacup = Teacup = (function() {
    function Teacup(instantiator, oracle) {
      this.instantiator = instantiator;
      this.oracle = oracle;
      this.bagMan = new BagMan;
    }

    Teacup.prototype.march = function(bag) {
      var attrs, component, n, node, tagConstructor, tagName, y;
      while (component = bag.inspect()) {
        switch (n = component.constructor.name) {
          case 'Function':
            bag.reinspect(this.instantiator(component));
            break;
          case 'String':
          case 'Number':
            bag.shipOut(component.toString());
            break;
          case 'Array':
            throw new Error('invalid array from bagman');
            break;
          default:
            tagName = this.oracle.getName(component);
            if (component.tag === '<') {
              bag.shipOut(this.rawMithril(component));
            } else if ('function' === typeof component.tagName) {
              tagConstructor = component.tagName;
              if (component.attrs) {
                attrs = component.attrs;
              } else {
                attrs = component.props;
              }
              node = new tagConstructor(tagName, attrs, component.children);
              if (!Teacup.prototype[tagName]) {
                Teacup.prototype[tagName] = function() {
                  var args, component;
                  component = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
                  return this.view.apply(this, [component].concat(slice.call(args)));
                };
              }
              bag.shipOut(this.view(node));
              break;
            }
            if (this[tagName]) {
              bag.shipOut(this[tagName](component));
            } else {
              if ('string' === typeof component.tag) {
                y = this.tag(component);
              } else {
                y = this.view(component);
              }
              bag.shipOut(y);
            }
        }
      }
      return null;
    };

    Teacup.prototype.render = function(component) {
      var oldBagger, result;
      oldBagger = this.bagMan;
      this.bagMan = new BagMan;
      this.bagMan.context(component);
      this.march(this.bagMan);
      result = this.bagMan.harvest().join('');
      this.bagMan = oldBagger;
      return result;
    };

    Teacup.prototype.cede = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.render.apply(this, args);
    };

    Teacup.prototype.renderable = function(template) {
      var teacup;
      teacup = this;
      return function() {
        var args, result;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if (teacup.htmlOut === null) {
          teacup.htmlOut = '';
          try {
            template.apply(this, args);
          } finally {
            result = teacup.resetBuffer();
          }
          return result;
        } else {
          return template.apply(this, args);
        }
      };
    };

    Teacup.prototype.renderAttr = function(name, value) {
      var k, v;
      if (value == null) {
        return " " + name;
      }
      if (value === false) {
        return '';
      }
      if (name === 'style' && 'object' === typeof value) {
        return " " + name + "=" + (((function() {
          var results;
          results = [];
          for (k in value) {
            v = value[k];
            results.push(k + ':' + v);
          }
          return results;
        })()).join(';'));
      }
      if (name === 'data' && typeof value === 'object') {
        return ((function() {
          var results;
          results = [];
          for (k in value) {
            v = value[k];
            results.push(this.renderAttr("data-" + k, v));
          }
          return results;
        }).call(this)).join('');
      }
      if (value === true) {
        value = name;
      }
      return " " + name + "=" + (quote(escape(value.toString())));
    };

    Teacup.prototype.attrOrder = ['id', 'class'];

    Teacup.prototype.renderAttrs = function(obj) {
      var className, i, len, name, ref1, result, value;
      if (!obj) {
        return '';
      }
      if (className = obj["class"] || obj.className) {
        obj["class"] = className;
        delete obj.className;
      }
      result = '';
      ref1 = this.attrOrder;
      for (i = 0, len = ref1.length; i < len; i++) {
        name = ref1[i];
        if (name in obj) {
          result += this.renderAttr(name, obj[name]);
        }
      }
      for (name in obj) {
        value = obj[name];
        if (indexOf.call(this.attrOrder, name) >= 0) {
          continue;
        }
        result += this.renderAttr(name, value);
      }
      return result;
    };

    Teacup.prototype.renderContents = function() {
      var contents, rest, result;
      contents = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (contents == null) {

      } else if (typeof contents === 'function') {
        result = contents.apply(this, rest);
        if (typeof result === 'string') {
          return this.textOnly(result);
        }
      } else {
        return this.textOnly(contents);
      }
    };

    Teacup.prototype.view = function(cell) {
      var children, props, ref1, result, x;
      children = cell.children;
      props = this.oracle.getProp(cell);
      result = '';
      if ((ref1 = cell.tag) != null ? ref1.view : void 0) {
        x = cell.tag.view(props);
        result += this.render(x);
      }
      return result;
    };

    Teacup.prototype.tag = function(cell) {
      var child, children, i, len, props, ref1, ref2, result, tagName;
      children = cell.children;
      props = this.oracle.getProp(cell);
      tagName = this.oracle.getName(cell);
      result = '';
      if (tagName !== 'text') {
        result += "<" + tagName + (this.renderAttrs(props)) + ">";
      }
      if (cell.text) {
        result += cell.text;
      } else if (props != null ? props.dangerouslySetInnerHTML : void 0) {
        result += props.dangerouslySetInnerHTML.__html;
      } else {
        if ('String' === ((ref1 = children.constructor) != null ? ref1.name : void 0) || !children.length) {
          children = [children];
        }
        for (i = 0, len = children.length; i < len; i++) {
          child = children[i];
          if ('String' === ((ref2 = child.constructor) != null ? ref2.name : void 0) || 'string' === typeof child) {
            result += escape(child.toString());
          } else {
            result += this.render(child);
          }
        }
      }
      if (tagName !== 'text') {
        result += "</" + tagName + ">";
      }
      return result;
    };

    Teacup.prototype.rawMithril = function(cell) {
      return cell.children;
    };

    Teacup.prototype.rawTag = function(cell) {
      var children, props, result, tagName;
      children = cell.children;
      props = this.oracle.getProp(cell);
      tagName = this.oracle.getName(cell);
      result = "<" + tagName + (this.renderAttrs(props)) + ">";
      result += children;
      result += "</" + tagName + ">";
      return result;
    };

    Teacup.prototype.scriptTag = function(cell) {
      var children, props, result, tagName;
      children = cell.children;
      props = this.oracle.getProp(cell);
      tagName = this.oracle.getName(cell);
      result = "<" + tagName + (this.renderAttrs(props)) + ">";
      result += children;
      result += "</" + tagName + ">";
      return result;
    };

    Teacup.prototype.selfClosingTag = function(cell) {
      var children, props, tagName;
      children = cell.children;
      props = this.oracle.getProp(cell);
      tagName = this.oracle.getName(cell);
      if ((normalizeArray(children)).length !== 0) {
        throw new Error("Halvalla: <" + tagName + "/> must not have content.  Attempted to nest " + children);
      }
      return "<" + tagName + (this.renderAttrs(props)) + " />";
    };

    Teacup.prototype.coffeescriptTag = function(cell) {
      var fn;
      fn = cell.children;
      return "<script type=\"text/javascript\">(function() {\n  var __slice = [].slice,\n      __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n      __hasProp = {}.hasOwnProperty,\n      __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n  (" + (escape(fn.toString())) + ")();\n})();</script>";
    };

    Teacup.prototype.commentTag = function(text) {
      return "<!--" + (escape(text.children)) + "-->";
    };

    Teacup.prototype.doctypeTag = function(type) {
      if (type == null) {
        type = 5;
      }
      return doctypes[type];
    };

    Teacup.prototype.ie = function(cell) {
      var props, result;
      props = this.oracle.getProp(cell);
      result = "<!--[if " + (escape(props.condition)) + "]>";
      result += this.render(cell.children);
      result += "<![endif]-->";
      return result;
    };

    Teacup.prototype.textOnly = function(s) {
      return (s != null) && escape(s.toString()) || '';
    };

    return Teacup;

  })();

  ref1 = mergeElements('regular', 'obsolete');
  fn1 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.tag.apply(this, args);
    };
  };
  for (i = 0, len = ref1.length; i < len; i++) {
    tagName = ref1[i];
    fn1(tagName);
  }

  Teacup.prototype['<'] = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return this.rawMithril.apply(this, args);
  };

  Teacup.prototype['text'] = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return this.tag.apply(this, args);
  };

  ref2 = mergeElements('raw');
  fn2 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.rawTag.apply(this, args);
    };
  };
  for (j = 0, len1 = ref2.length; j < len1; j++) {
    tagName = ref2[j];
    fn2(tagName);
  }

  ref3 = mergeElements('coffeescript');
  fn3 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.coffeescriptTag.apply(this, args);
    };
  };
  for (l = 0, len2 = ref3.length; l < len2; l++) {
    tagName = ref3[l];
    fn3(tagName);
  }

  ref4 = mergeElements('comment');
  fn4 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.commentTag.apply(this, args);
    };
  };
  for (m = 0, len3 = ref4.length; m < len3; m++) {
    tagName = ref4[m];
    fn4(tagName);
  }

  ref5 = mergeElements('script');
  fn5 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.scriptTag.apply(this, args);
    };
  };
  for (o = 0, len4 = ref5.length; o < len4; o++) {
    tagName = ref5[o];
    fn5(tagName);
  }

  ref6 = 'ie';
  fn6 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.ie.apply(this, args);
    };
  };
  for (p = 0, len5 = ref6.length; p < len5; p++) {
    tagName = ref6[p];
    fn6(tagName);
  }

  ref7 = mergeElements('void', 'obsolete_void');
  fn7 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.selfClosingTag.apply(this, args);
    };
  };
  for (q = 0, len6 = ref7.length; q < len6; q++) {
    tagName = ref7[q];
    fn7(tagName);
  }

}).call(this);
