// Generated by CoffeeScript 2.0.0-beta4
(function() {
  /*
   * Halvalla -- bindings for element creation and expression via teact and teacup
   */
  var Component, GreatEmptiness, Halvalla, allTags, doctypes, dummyComponent, elements, escape, mergeElements, normalizeArray, propertyName, quote, teacup;

  /*
   * The oracle, a globally supplied object to this module has this signature
  Examples of oracle -- the default is to do Teacup to HTML
    ReactDom = require 'react-dom'
    Oracle =
      summoner: React
      name: 'React'
      isValidElement: React.isValidElement
      Component: React.Component
      createElement: React.createElement
      conjurer: ReactDom.renderToString
    Mithril = require 'mithril'
    Oracle =
      name: 'Mithril'
      isValidElement: (c)->c.view?
      createElement: Mithril
      Component: {}

   */
  //teact = require '../src/teact.coffee'
  ({doctypes, elements, normalizeArray, mergeElements, allTags, escape, quote} = require('../src/html-tags'));

  teacup = require('../src/teacup.coffee');

  //if we are using React as the master, it supplies a class, otherwise an empty class with an empty view
  propertyName = 'props';

  dummyComponent = Component = class Component {
    constructor(tagName, properties = {}, ...children1) {
      this.children = children1;
      this[propertyName] = properties;
      if (this.children.length === 1) {
        this.children = this.children[0];
      }
      this.tagName = tagName;
      this;
    }

    view() {}

    render() {}

  };

  GreatEmptiness = GreatEmptiness = class GreatEmptiness {
    constructor(instantiator, Oracle = {}) {
      var defaultObject, key, ref, value;
      defaultObject = {
        isValidElement: function(c) {
          return c.view != null;
        },
        name: 'great-emptiness',
        Component: dummyComponent,
        createElement: function(...args) {
          return new dummyComponent(...args);
        },
        summoner: null,
        getProp: function(element) {
          return element.attrs;
        },
        getName: function(element) {
          return element.tag;
        },
        conjurer: null
      };
      ref = Object.assign(defaultObject, Oracle);
      // decorate this singleton with
      for (key in ref) {
        value = ref[key];
        GreatEmptiness.prototype[key] = value;
      }
      this.teacup = new teacup(instantiator, defaultObject);
      this.conjurer = this.teacup.render.bind(this.teacup);
      this;
    }

  };

  
  // global Oracle

  Halvalla = (function() {
    var oracle;

    class Halvalla {
      constructor(Oracle = null) {
        this.instantiator = this.instantiator.bind(this);
        this.ie = this.ie.bind(this);
        this.tag = this.tag.bind(this);
        this.crelVoid = this.crelVoid.bind(this);
        this.crel = this.crel.bind(this);
        this.renderable = this.renderable.bind(this);
        this.stack = null;
        oracle = new GreatEmptiness(this.instantiator, Oracle);
        propertyName = oracle.propertyName;
      }

      resetStack(stack = null) {
        var previous;
        previous = this.stack;
        this.stack = stack;
        return previous;
      }

      pureComponent(contents) {
        return function() {
          var children, previous, stackHad;
          previous = this.resetStack(null);
          children = contents.apply(this, arguments);
          stackHad = this.resetStack(previous);
          if (stackHad.length === 0) {
            stackHad.push(result);
          }
          return stackHad;
        };
      }

      instantiator(funct, ...args) {
        var previous, result, stackHad;
        previous = this.resetStack([]);
        result = funct(...args);
        stackHad = this.resetStack(previous);
        if (stackHad.length === 0) {
          stackHad.push(result);
        }
        return stackHad;
      }

      raw(text) {
        var el, ref;
        if (!text.toString) {
          throw new Error("raw allows text only: expected a string");
        }
        if (oracle.trust) {
          el = oracle.trust(text);
        } else {
          el = oracle.createElement('text', {
            dangerouslySetInnerHTML: {
              __html: text.toString()
            }
          });
        }
        if ((ref = this.stack) != null) {
          ref.push(el);
        }
        return el;
      }

      doctype(type = 5) {
        return this.raw(doctypes[type]);
      }

      oracle() {
        return oracle;
      }

      ie(condition, contents) {
        return this.crel('ie', {
          condition: condition
        }, contents);
      }

      tag(tagName, ...args) {
        var attrs, children, contents, el;
        if (!((tagName != null) && 'string' === typeof tagName)) {
          throw new Error(`HTML tag type is invalid: expected a string but got ${typeof (tagName != null)}`);
        }
        ({attrs, contents} = this.normalizeArgs(args));
        children = contents;
        if (children != null ? children.splice : void 0) {
          el = oracle.createElement(tagName, attrs, ...children);
        } else {
          el = oracle.createElement(tagName, attrs, children);
        }
        return allTags[tagName] = Halvalla.prototype[tagName] = el;
      }

      bless(component, itsName = null) {
        var name;
        if (component.__esModule && component.default) {
          component = component.default;
        }
        name = itsName || component.name;
        return allTags[name] = Halvalla.prototype[name] = (...args) => {
          return this.crel(component, ...args);
        };
      }

      component(func) {
        return (...args) => {
          var attrs, contents, renderContents, selector;
          ({selector, attrs, contents} = this.normalizeArgs(args));
          renderContents = (...args) => {
            args.unshift(contents);
            return this.renderContents.apply(this, args);
          };
          return func.apply(this, [selector, attrs, renderContents]);
        };
      }

      crelVoid(tagName, ...args) {
        var attrs, contents, el, ref;
        ({attrs, contents} = this.normalizeArgs(args));
        if (contents.length > 0) {
          throw new Error(`Element type is invalid: must not have content: ${tagName}`);
        }
        el = oracle.createElement(tagName, attrs, null);
        if ((ref = this.stack) != null) {
          ref.push(el);
        }
        return el;
      }

      crel(tagName, ...args) {
        var attrs, children, contents, el, ref;
        if (tagName == null) {
          throw new Error(`Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: ${tagName}`);
        }
        ({attrs, contents} = this.normalizeArgs(args));
        children = contents;
        if (children != null ? children.splice : void 0) {
          el = oracle.createElement(tagName, attrs, ...children);
        } else {
          el = oracle.createElement(tagName, attrs, children);
        }
        if ((ref = this.stack) != null) {
          ref.push(el);
        }
        return el;
      }

      text(s) {
        var ref;
        if (!(s != null ? s.toString : void 0)) {
          return s;
        }
        if ((ref = this.stack) != null) {
          ref.push(s.toString());
        }
        return s.toString();
      }

      isSelector(string) {
        var ref;
        return string.length > 1 && ((ref = string.charAt(0)) === '#' || ref === '.');
      }

      parseSelector(selector) {
        var classes, i, id, klass, len, ref, token;
        id = null;
        classes = [];
        ref = selector.split('.');
        for (i = 0, len = ref.length; i < len; i++) {
          token = ref[i];
          token = token.trim();
          if (id) {
            classes.push(token);
          } else {
            [klass, id] = token.split('#');
            if (klass !== '') {
              classes.push(token);
            }
          }
        }
        return {id, classes};
      }

      normalizeArgs(args) {
        var a, arg, attrs, classes, contents, dataAttrs, i, id, index, j, k, l, len, len1, len2, parsedSelector, selector, stuff, v, x;
        attrs = {};
        selector = null;
        contents = [];
        for (index = i = 0, len = args.length; i < len; index = ++i) {
          arg = args[index];
          if (arg != null) {
            switch (typeof arg) {
              case 'string':
                if (index === 0 && this.isSelector(arg)) {
                  selector = arg;
                  parsedSelector = this.parseSelector(arg);
                } else {
                  contents.push(arg);
                }
                break;
              case 'number':
              case 'boolean':
                contents.push(arg);
                break;
              case 'function':
                //debugger
                if (oracle.preInstantiate) {
                  stuff = this.instantiator(arg);
                  stuff = normalizeArray(stuff);
                  for (j = 0, len1 = stuff.length; j < len1; j++) {
                    x = stuff[j];
                    contents.push(x);
                  }
                } else {
                  contents.push(arg);
                }
                break;
              case 'object':
                if (arg.constructor === Object) {
                  attrs = arg;
                }
                if (arg.default && arg.__esModule) {
                  arg = arg.default;
                }
                if (arg.constructor === Object && !oracle.isValidElement(arg)) {
                  attrs = Object.keys(arg).reduce(function(clone, key) {
                    clone[key] = arg[key];
                    return clone;
                  }, {});
                } else if (arg.length != null) {
                  for (l = 0, len2 = arg.length; l < len2; l++) {
                    a = arg[l];
                    if (a) {
                      contents.push(a);
                    }
                  }
                }
                break;
              default:
                contents.push = arg;
            }
          }
        }
        if (parsedSelector != null) {
          ({id, classes} = parsedSelector);
          if (id != null) {
            attrs.id = id;
          }
          if (classes != null ? classes.length : void 0) {
            if (attrs.class) {
              classes.push(attrs.class);
            }
            attrs.class = classes.join(' ');
            if (attrs.className) {
              classes.push(attrs.className);
            }
            attrs.className = classes.join(' ');
          }
        }
        // Expand data attributes
        dataAttrs = attrs.data;
        if (typeof dataAttrs === 'object') {
          delete attrs.data;
          for (k in dataAttrs) {
            v = dataAttrs[k];
            attrs[`data-${k}`] = v;
          }
        }
        contents = normalizeArray(contents);
        return {attrs, contents, selector};
      }

      
      // Plugins

      use(plugin) {
        return plugin(this);
      }

      renderable(stuff) {
        return (...args) => {
          return oracle.conjurer(this.instantiator(stuff, ...args));
        };
      }

      
      // rendering
      cede(...args) {
        return this.render(...args);
      }

      render(node, ...rest) {
        var previous, structure;
        previous = this.resetStack(null);
        try {
          structure = node(...rest);
        } catch (error) {
          debugger;
        }
        this.resetStack(previous);
        return oracle.conjurer(structure);
      }

      
      // Binding

      tags() {
        var bound, boundMethodNames, fn, fn1, fn2, fn3, fn4, i, j, l, len, len1, len2, len3, len4, m, method, n, ref, ref1, ref2, ref3, tagName;
        bound = {};
        boundMethodNames = [].concat('bless cede component doctype escape ie normalizeArgs pureComponent oracle raw render renderable tag text use'.split(' '), mergeElements('regular', 'obsolete', 'raw', 'void', 'obsolete_void', 'script', 'coffeescript', 'comment'));
        fn = (method) => {
          return allTags[method] = bound[method] = (...args) => {
            if (!this[method]) {
              throw `no method named ${method} in Halvalla`;
            }
            return this[method].apply(this, args);
          };
        };
        for (i = 0, len = boundMethodNames.length; i < len; i++) {
          method = boundMethodNames[i];
          fn(method);
        }
        ref = mergeElements('regular', 'obsolete');
        // Define tag functions on the prototype for pretty stack traces
        fn1 = function(tagName) {
          return allTags[tagName] = Halvalla.prototype[tagName] = function(...args) {
            return this.crel(tagName, ...args);
          };
        };
        for (j = 0, len1 = ref.length; j < len1; j++) {
          tagName = ref[j];
          fn1(tagName);
        }
        ref1 = mergeElements('raw');
        fn2 = function(tagName) {
          return allTags[tagName] = Halvalla.prototype[tagName] = function(...args) {
            return this.crel(tagName, ...args);
          };
        };
        for (l = 0, len2 = ref1.length; l < len2; l++) {
          tagName = ref1[l];
          fn2(tagName);
        }
        ref2 = mergeElements('script', 'coffeescript', 'comment');
        fn3 = function(tagName) {
          return allTags[tagName] = Halvalla.prototype[tagName] = function(...args) {
            return this.crel(tagName, ...args);
          };
        };
        for (m = 0, len3 = ref2.length; m < len3; m++) {
          tagName = ref2[m];
          fn3(tagName);
        }
        ref3 = mergeElements('void', 'obsolete_void');
        //allTags['ie']= Halvalla::['ie'] = (args...) -> @ie args...
        fn4 = function(tagName) {
          return allTags[tagName] = Halvalla.prototype[tagName] = function(...args) {
            return this.crelVoid(tagName, ...args);
          };
        };
        for (n = 0, len4 = ref3.length; n < len4; n++) {
          tagName = ref3[n];
          fn4(tagName);
        }
        return bound;
      }

    };

    oracle = null;

    Halvalla.prototype.escape = escape;

    Halvalla.prototype.quote = quote;

    return Halvalla;

  })();

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    module.exports = new Halvalla().tags();
    module.exports.Halvalla = Halvalla;
  } else {
    window.Halvalla = new Halvalla().tags();
    window.Halvalla.Halvalla = Halvalla;
  }

}).call(this);
