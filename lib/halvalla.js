// Generated by CoffeeScript 1.12.7

/*
 * Halvalla -- bindings for element creation and expression via teact and teacup
 */


/*
 * The oracle, a globally supplied object to this module has this signature
Examples of oracle -- the default is to do Teacup to HTML
  ReactDom = require 'react-dom'
  Oracle =
    summoner: React
    name: 'React'
    isValidElement: React.isValidElement
    Component: React.Component
    createElement: React.createElement
    conjurer: ReactDom.renderToString
  Mithril = require 'mithril'
  Oracle =
    name: 'Mithril'
    isValidElement: (c)->c.view?
    createElement: Mithril
    Component: {}
 */

(function() {
  var Component, GreatEmptiness, Halvalla, allTags, doctypes, dummyComponent, elements, escape, mergeElements, normalizeArray, propertyName, quote, ref, teacup,
    slice = [].slice,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ref = require('../src/html-tags'), doctypes = ref.doctypes, elements = ref.elements, normalizeArray = ref.normalizeArray, mergeElements = ref.mergeElements, allTags = ref.allTags, escape = ref.escape, quote = ref.quote;

  teacup = require('../src/teacup.coffee');

  propertyName = 'props';

  dummyComponent = Component = (function() {
    function Component() {
      var children1, properties, tagName;
      tagName = arguments[0], properties = arguments[1], children1 = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      if (properties == null) {
        properties = {};
      }
      this.children = children1;
      this[propertyName] = properties;
      if (this.children.length === 1) {
        this.children = this.children[0];
      }
      this.tagName = tagName;
      this;
    }

    Component.prototype.view = function() {};

    Component.prototype.render = function() {};

    return Component;

  })();

  GreatEmptiness = GreatEmptiness = (function() {
    function GreatEmptiness(instantiator, Oracle) {
      var defaultObject, key, ref1, value;
      if (Oracle == null) {
        Oracle = {};
      }
      defaultObject = {
        isValidElement: function(c) {
          return c.view != null;
        },
        name: 'great-emptiness',
        Component: dummyComponent,
        Element: dummyComponent,
        createElement: function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return (function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(dummyComponent, args, function(){});
        },
        summoner: null,
        getProp: function(element) {
          return element.attrs;
        },
        getName: function(element) {
          return element.tag;
        },
        conjurer: null
      };
      ref1 = Object.assign(defaultObject, Oracle);
      for (key in ref1) {
        value = ref1[key];
        GreatEmptiness.prototype[key] = value;
      }
      this.teacup = new teacup(instantiator, defaultObject);
      if (!this.conjurer) {
        this.conjurer = this.teacup.render.bind(this.teacup);
      }
      this;
    }

    return GreatEmptiness;

  })();

  Halvalla = (function() {
    var oracle;

    oracle = null;

    function Halvalla(Oracle) {
      if (Oracle == null) {
        Oracle = null;
      }
      this.renderable = bind(this.renderable, this);
      this.crel = bind(this.crel, this);
      this.crelVoid = bind(this.crelVoid, this);
      this.tag = bind(this.tag, this);
      this.ie = bind(this.ie, this);
      this.instantiator = bind(this.instantiator, this);
      this.stack = null;
      oracle = new GreatEmptiness(this.instantiator, Oracle);
      propertyName = oracle.propertyName;
    }

    Halvalla.prototype.escape = escape;

    Halvalla.prototype.quote = quote;

    Halvalla.prototype.resetStack = function(stack) {
      var previous;
      if (stack == null) {
        stack = null;
      }
      previous = this.stack;
      this.stack = stack;
      return previous;
    };

    Halvalla.prototype.pureComponent = function(contents) {
      return function() {
        var children, previous, stackHad;
        previous = this.resetStack(null);
        children = contents.apply(this, arguments);
        stackHad = this.resetStack(previous);
        if (stackHad.length === 0) {
          stackHad.push(result);
        }
        return stackHad;
      };
    };

    Halvalla.prototype.instantiator = function() {
      var args, funct, previous, result, stackHad;
      funct = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      previous = this.resetStack([]);
      result = funct.apply(null, args);
      stackHad = this.resetStack(previous);
      if (stackHad.length === 0) {
        stackHad.push(result);
      }
      return stackHad;
    };

    Halvalla.prototype.raw = function(text) {
      var el, ref1;
      if (!text.toString) {
        throw new Error("raw allows text only: expected a string");
      }
      if (oracle.trust) {
        el = oracle.trust(text);
      } else {
        el = oracle.createElement('text', {
          dangerouslySetInnerHTML: {
            __html: text.toString()
          }
        });
      }
      if ((ref1 = this.stack) != null) {
        ref1.push(el);
      }
      return el;
    };

    Halvalla.prototype.doctype = function(type) {
      if (type == null) {
        type = 5;
      }
      return this.raw(doctypes[type]);
    };

    Halvalla.prototype.ie = function(condition, contents) {
      return this.crel('ie', {
        condition: condition
      }, contents);
    };

    Halvalla.prototype.tag = function() {
      var args, attrs, children, contents, el, ref1, tagName;
      tagName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (!((tagName != null) && 'string' === typeof tagName)) {
        throw new Error("HTML tag type is invalid: expected a string but got " + (typeof (tagName != null)));
      }
      ref1 = this.normalizeArgs(args), attrs = ref1.attrs, contents = ref1.contents;
      children = contents;
      el = oracle.createElement(tagName, attrs, children);
      return allTags[tagName] = Halvalla.prototype[tagName] = el;
    };

    Halvalla.prototype.bless = function(component, itsName) {
      var name;
      if (itsName == null) {
        itsName = null;
      }
      debugger;
      if (component.__esModule && component["default"]) {
        component = component["default"];
      }
      name = itsName || component.name;
      name = name[0].toLowerCase() + name.slice(1);
      return allTags[name] = Halvalla.prototype[name] = (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return _this.crel.apply(_this, [name, component].concat(slice.call(args)));
        };
      })(this);
    };

    Halvalla.prototype.component = function(func) {
      return (function(_this) {
        return function() {
          var args, attrs, contents, ref1, renderContents, selector;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          ref1 = _this.normalizeArgs(args), selector = ref1.selector, attrs = ref1.attrs, contents = ref1.contents;
          renderContents = function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            args.unshift(contents);
            return _this.renderContents.apply(_this, args);
          };
          return func.apply(_this, [selector, attrs, renderContents]);
        };
      })(this);
    };

    Halvalla.prototype.crelVoid = function() {
      var args, attrs, contents, el, ref1, ref2, tagName;
      tagName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      ref1 = this.normalizeArgs(args), attrs = ref1.attrs, contents = ref1.contents;
      if (contents.length > 0) {
        throw new Error("Element type is invalid: must not have content: " + tagName);
      }
      el = oracle.createElement(tagName, attrs, null);
      if ((ref2 = this.stack) != null) {
        ref2.push(el);
      }
      return el;
    };

    Halvalla.prototype.crel = function() {
      var args, attrs, children, contents, el, ref1, ref2, tagName;
      tagName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (tagName == null) {
        throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + tagName);
      }
      ref1 = this.normalizeArgs(args), attrs = ref1.attrs, contents = ref1.contents;
      children = contents;
      if (tagName.apply && oracle.instantiateChildFunction) {
        tagName = this.tagName(attrs, children);
      }
      if (children != null ? children.splice : void 0) {
        el = oracle.createElement.apply(oracle, [tagName, attrs].concat(slice.call(children)));
      } else {
        el = oracle.createElement(tagName, attrs, children);
      }
      if ((ref2 = this.stack) != null) {
        ref2.push(el);
      }
      return el;
    };

    Halvalla.prototype.text = function(s) {
      var ref1;
      if (!(s != null ? s.toString : void 0)) {
        return s;
      }
      if ((ref1 = this.stack) != null) {
        ref1.push(s.toString());
      }
      return s.toString();
    };

    Halvalla.prototype.isSelector = function(string) {
      var ref1;
      return string.length > 1 && ((ref1 = string.charAt(0)) === '#' || ref1 === '.');
    };

    Halvalla.prototype.parseSelector = function(selector) {
      var classes, i, id, klass, len, ref1, ref2, token;
      id = null;
      classes = [];
      ref1 = selector.split('.');
      for (i = 0, len = ref1.length; i < len; i++) {
        token = ref1[i];
        token = token.trim();
        if (id) {
          classes.push(token);
        } else {
          ref2 = token.split('#'), klass = ref2[0], id = ref2[1];
          if (klass !== '') {
            classes.push(token);
          }
        }
      }
      return {
        id: id,
        classes: classes
      };
    };

    Halvalla.prototype.normalizeArgs = function(args) {
      var a, arg, attrs, classes, contents, dataAttrs, i, id, index, j, k, l, len, len1, len2, parsedSelector, selector, stuff, v, x;
      attrs = {};
      selector = null;
      contents = [];
      for (index = i = 0, len = args.length; i < len; index = ++i) {
        arg = args[index];
        if (arg != null) {
          switch (typeof arg) {
            case 'string':
              if (index === 0 && this.isSelector(arg)) {
                selector = arg;
                parsedSelector = this.parseSelector(arg);
              } else {
                contents.push(arg);
              }
              break;
            case 'number':
            case 'boolean':
              contents.push(arg);
              break;
            case 'function':
              if (oracle.preInstantiate) {
                stuff = this.instantiator(arg);
                stuff = normalizeArray(stuff);
                for (j = 0, len1 = stuff.length; j < len1; j++) {
                  x = stuff[j];
                  contents.push(x);
                }
              } else {
                contents.push(arg);
              }
              break;
            case 'object':
              if (arg.constructor === Object) {
                attrs = arg;
              }
              if (arg["default"] && arg.__esModule) {
                arg = arg["default"];
              }
              if (arg.constructor === Object && !oracle.isValidElement(arg)) {
                attrs = Object.keys(arg).reduce(function(clone, key) {
                  clone[key] = arg[key];
                  return clone;
                }, {});
              } else if (arg.length != null) {
                for (l = 0, len2 = arg.length; l < len2; l++) {
                  a = arg[l];
                  if (a) {
                    contents.push(a);
                  }
                }
              }
              break;
            default:
              contents.push = arg;
          }
        }
      }
      if (parsedSelector != null) {
        id = parsedSelector.id, classes = parsedSelector.classes;
        if (id != null) {
          attrs.id = id;
        }
        if (classes != null ? classes.length : void 0) {
          if (attrs["class"]) {
            classes.push(attrs["class"]);
          }
          attrs["class"] = classes.join(' ');
          if (attrs.className) {
            classes.push(attrs.className);
          }
          attrs.className = classes.join(' ');
        }
      }
      dataAttrs = attrs.data;
      if (typeof dataAttrs === 'object') {
        delete attrs.data;
        for (k in dataAttrs) {
          v = dataAttrs[k];
          attrs["data-" + k] = v;
        }
      }
      contents = normalizeArray(contents);
      return {
        attrs: attrs,
        contents: contents,
        selector: selector
      };
    };

    Halvalla.prototype.use = function(plugin) {
      return plugin(this);
    };

    Halvalla.prototype.renderable = function(stuff) {
      return (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return oracle.conjurer(_this.instantiator.apply(_this, [stuff].concat(slice.call(args))));
        };
      })(this);
    };

    Halvalla.prototype.cede = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.render.apply(this, args);
    };

    Halvalla.prototype.render = function() {
      var node, previous, rest, structure;
      node = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      previous = this.resetStack(null);
      try {
        debugger;
        structure = node.apply(null, rest);
      } catch (error) {
        debugger;
      }
      this.resetStack(previous);
      return oracle.conjurer(structure);
    };

    Halvalla.prototype.tags = function() {
      var bound, boundMethodNames, fn, fn1, fn2, fn3, fn4, i, j, l, len, len1, len2, len3, len4, m, method, n, ref1, ref2, ref3, ref4, tagName;
      bound = {};
      bound.Oracle = oracle;
      bound.Component = dummyComponent;
      boundMethodNames = [].concat('bless cede component doctype escape ie normalizeArgs pureComponent raw render renderable tag text use'.split(' '), mergeElements('regular', 'obsolete', 'raw', 'void', 'obsolete_void', 'script', 'coffeescript', 'comment'));
      fn = (function(_this) {
        return function(method) {
          return allTags[method] = bound[method] = function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            if (!_this[method]) {
              throw "no method named " + method + " in Halvalla";
            }
            return _this[method].apply(_this, args);
          };
        };
      })(this);
      for (i = 0, len = boundMethodNames.length; i < len; i++) {
        method = boundMethodNames[i];
        fn(method);
      }
      ref1 = mergeElements('regular', 'obsolete');
      fn1 = function(tagName) {
        return allTags[tagName] = Halvalla.prototype[tagName] = function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return this.crel.apply(this, [tagName].concat(slice.call(args)));
        };
      };
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        tagName = ref1[j];
        fn1(tagName);
      }
      ref2 = mergeElements('raw');
      fn2 = function(tagName) {
        return allTags[tagName] = Halvalla.prototype[tagName] = function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return this.crel.apply(this, [tagName].concat(slice.call(args)));
        };
      };
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        tagName = ref2[l];
        fn2(tagName);
      }
      ref3 = mergeElements('script', 'coffeescript', 'comment');
      fn3 = function(tagName) {
        return allTags[tagName] = Halvalla.prototype[tagName] = function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return this.crel.apply(this, [tagName].concat(slice.call(args)));
        };
      };
      for (m = 0, len3 = ref3.length; m < len3; m++) {
        tagName = ref3[m];
        fn3(tagName);
      }
      ref4 = mergeElements('void', 'obsolete_void');
      fn4 = function(tagName) {
        return allTags[tagName] = Halvalla.prototype[tagName] = function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return this.crelVoid.apply(this, [tagName].concat(slice.call(args)));
        };
      };
      for (n = 0, len4 = ref4.length; n < len4; n++) {
        tagName = ref4[n];
        fn4(tagName);
      }
      return bound;
    };

    return Halvalla;

  })();

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    module.exports = new Halvalla().tags();
    module.exports.Halvalla = Halvalla;
  } else {
    window.Halvalla = new Halvalla().tags();
    window.Halvalla.Halvalla = Halvalla;
  }

}).call(this);
